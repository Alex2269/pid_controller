// ************************************************ ********************************
// Arduino PID Library Version 1.0.1 Modified Version for C -
// Незалежний від платформи
// --
// Редакція: 1.1
// --
// Опис: модуль ПІД-регулятора, спочатку призначений для Arduino
// незалежний від платформи.  Деякі невеликі помилки в оригінальному коді Arduino
// також були виправлені.
// --
// Для детального пояснення теорії цієї бібліотеки перейдіть до:
// http://brettbeauregard.com/blog/2011/04/improving-the-beginners-pid-introduction/
// --
// Редакції можна знайти тут:
// https://github.com/tcleg
// --
// Змінено: Трентом Клеггорном, <trentoncleghorn@gmail.com>
// --
// Авторське право (C) Бретт Борегард, <br3ttb@gmail.com>
// --
// Ліцензія GPLv3
// --
// Ця програма є безкоштовним програмним забезпеченням: ви можете повторно поширювати її та/або змінювати
// умови Загальної публічної ліцензії GNU, опублікованої Вільним програмним забезпеченням
// Foundation, або версія 3 Ліцензії, або (на ваш вибір) будь-яка пізніше
// версія.
// --
// Ця програма розповсюджується в надії, що вона буде корисною, але БЕЗ НІКОГО
// ГАРАНТІЯ;  навіть без неявної гарантії ТОВАРНОЇ ЦІННОСТІ чи ПРИДАТНОСТІ ДЛЯ A
// КОНКРЕТНЕ ПРИЗНАЧЕННЯ.  Додаткову інформацію див. у Загальній публічній ліцензії GNU.
// --
// Ви мали отримати копію GNU General Public License разом із
// ця програма.  Якщо ні, перегляньте <http://www.gnu.org/licenses/>.
// ************************************************ ********************************
// --
// Header Guard
// --
#ifndef PID_CONTROLLER_H
#define PID_CONTROLLER_H
// ************************************************ ********************************
// Заголовки
// ************************************************ ********************************
#include <stdint.h>
#include <stdbool.h>
// --
// Зв'язування C для компіляторів C++
// --
#ifdef __cplusplus
зовнішній "C"
{
#endif
// ************************************************ ********************************
// Макроси та глобали
// ************************************************ ********************************
typedef enum
{
  РУЧНИЙ, АВТОМАТИЧНИЙ
} PIDMode;

typedef enum
{
  ПРЯМА, ЗВОРОТНА
} PIDDirection;

typedef struct
{
  // --
  // Вхід до ПІД-регулятора
  // --
  плаваючий вхід;
  // --
  // Попередній вхід до ПІД-регулятора
  // --
  float lastInput;
  // --
  // Вихід ПІД-регулятора
  // --
  плаваючий вихід;
  // --
  // Отримати постійні значення, передані користувачем
  // Це для відображення
  // --
  float dispKp;
  float dispKi;
  float dispKd;
  // --
  // Отримати постійні значення, які контролер змінює
  // власне використання
  // --
  float alteredKp;
  float alteredKi;
  float alteredKd;
  // --
  // Інтегральний термін
  // --
  float iTerm;
  // --
  // Інтервал (у секундах), на якому ПІД-регулятор
  // буде викликано
  // --
  float sampleTime;
  // --
  // Значення, якими буде обмежений вихід
  // --
  float outMin;
  float outMax;
  // --
  // Вибрана користувачем робоча точка
  // --
  плаваюча уставка;
  // --
  // Відчуття напрямку контролера
  // ПРЯМИЙ: позитивне задане значення дає позитивний вихід
  // REVERSE: позитивне задане значення дає негативний вихід
  // --
  PIDDirection controllerDirection;
  // --
  // Повідомляє, як має відповісти контролер, якщо користувач відповів
  // взято на ручне керування чи ні
  // MANUAL: ПІД-регулятор вимкнено.
  // АВТОМАТИЧНО: ПІД-регулятор увімкнено.
  // --
  Режим PIDMode;
} PIDControl;

// ************************************************ ********************************
// Прототипи
// ************************************************ ********************************
// --
// Ініціалізація PID
// Опис:
// Ініціалізує екземпляр PIDControl.  Це потрібно викликати принаймні один раз
// перед викликом інших функцій PID.
// Параметри:
// pid - адреса екземпляра PIDControl.
// kp - постійне значення посилення позитивного P.
// ki - Позитивне я отримую постійне значення.
// kd - постійне значення посилення позитивного D.
// sampleTimeSeconds - Інтервал у секундах, коли PIDCompute буде викликано.
// minOutput - обмежити вихід PID цим мінімальним значенням.
// maxOutput - обмежити вихід PID цим максимальним значенням.
// режим - вказує, як повинен реагувати контролер, якщо користувач перейняв керування
// ручне керування чи ні.
// MANUAL: ПІД-регулятор вимкнено.  Користувач може вручну керувати
// вихід.
// АВТОМАТИЧНО: ПІД-регулятор увімкнено.  ПІД-регулятор контролює вихід.
// controllerDirection - Відчуття напрямку контролера
// ПРЯМИЙ: позитивне задане значення дає позитивний вихід.
// REVERSE: позитивне задане значення дає негативний вихід.
// Повертає:
// Нічого.
// --
extern void PIDInit(PIDControl *pid, float kp, float ki, float kd,
                    float sampleTimeSeconds, float minOutput, float maxOutput,
                    Режим PIDMode, PIDDirection controllerDirection);
// --
// Обчислення PID
// Опис:
// Має викликатися через регулярний інтервал, визначений sampleTimeSeconds.
// Як правило, PIDSetpointSet і PIDInputSet слід викликати негайно
// перед PIDCompute.
// Параметри:
// pid - адреса екземпляра PIDControl.
// Повертає:
// Істинно, якщо встановлено AUTOMATIC.  False, якщо в MANUAL.
// --
extern bool PIDCompute(PIDControl *pid);

// --
// Встановлення режиму ПІД
// Опис:
// Встановлює новий режим ПІД-регулятора.
// Параметри:
// pid - адреса екземпляра PIDControl.
// режим - вказує, як повинен реагувати контролер, якщо користувач перейняв керування
// ручне керування чи ні.
// MANUAL: ПІД-регулятор вимкнено.  Користувач може вручну керувати
// вихід.
// АВТОМАТИЧНО: ПІД-регулятор увімкнено.  ПІД-регулятор контролює вихід.
// Повертає:
// Нічого.
// --
extern void PIDModeSet(PIDControl *pid, режим PIDMode);

// --
// Встановлення обмежень вихідного сигналу PID
// Опис:
// Встановлює нові обмеження виведення.  Нові обмеження застосовуються до PID
// негайно.
// Параметри:
// pid - адреса екземпляра PIDControl.
// min - обмежити вихід PID цим мінімальним значенням.
// max - обмежити вихід PID до цього максимального значення.
// Повертає:
// Нічого.
// --
extern void PIDOutputLimitsSet(PIDControl *pid, float min, float max);

// --
// Набір налаштувань PID
// Опис:
// Встановлює нові постійні значення посилення.
// Параметри:
// pid - адреса екземпляра PIDControl.
// kp - постійне значення посилення позитивного P.
// ki - Позитивне я отримую постійне значення.
// kd - постійне значення посилення позитивного D.
// Повертає:
// Нічого.
// --
extern void PIDTuningsSet(PIDControl *pid, float kp, float ki, float kd);

// --
// Встановлення константи підсилення PID налаштування
// Опис:
// Встановлює постійне значення пропорційного посилення.
// Параметри:
// pid - адреса екземпляра PIDControl.
// kp - постійне значення посилення позитивного P.
// Повертає:
// Нічого.
// --
extern void PIDTuningKpSet(PIDControl *pid, float kp);

// --
// Встановлюю константу підсилення налаштування ПІД
// Опис:
// Встановлює постійне значення пропорційного посилення.
// Параметри:
// pid - адреса екземпляра PIDControl.
// ki - Позитивне я отримую постійне значення.
// Повертає:
// Нічого.
// --
extern void PIDTuningKiSet(PIDControl *pid, float ki);

// --
// Встановлення константи підсилення ПІД налаштування D
// Опис:
// Встановлює постійне значення пропорційного посилення.
// Параметри:
// pid - адреса екземпляра PIDControl.
// kd - постійне значення посилення позитивного D.
// Повертає:
// Нічого.
// --
extern void PIDTuningKdSet(PIDControl *pid, float kd);

// --
// Встановлення напрямку ПІД-регулятора
// Опис:
// Встановлює новий напрямок контролера.
// Параметри:
// pid - адреса екземпляра PIDControl.
// controllerDirection - Відчуття напрямку контролера
// ПРЯМИЙ: позитивне задане значення дає позитивний вихід
// REVERSE: позитивне задане значення дає негативний вихід
// Повертає:
// Нічого.
// --
extern void PIDControllerDirectionSet(PIDControl *pid, PIDDirection controllerDirection);

// --
// Набір часу вибірки PID
// Опис:
// Встановлює новий час вибірки (у секундах).
// Параметри:
// pid - адреса екземпляра PIDControl.
// sampleTimeSeconds - Інтервал у секундах, коли PIDCompute буде викликано.
// Повертає:
// Нічого.
// --
extern void PIDSampleTimeSet(PIDControl *pid, float sampleTimeSeconds);

// --
// Базові функції встановлення та отримання параметрів PID
// --
// --
// Набір уставки ПІД
// Опис:
// Змінює задане значення, якого намагатиметься досягти ПІД-регулятор.
// Параметри:
// pid - адреса екземпляра PIDControl.
// задане значення – бажане задане значення, яке намагатиметься отримати ПІД-регулятор.
// Повертає:
// Нічого.
// --
статична вбудована порожнеча
PIDSetpointSet(PIDControl *pid, float setpoint)
{
  pid->setpoint = задане значення;
}

// --
// Набір входів PID
// Опис:
// Має бути викликано перед викликом PIDCompute, щоб контролер ПІД
// мати оновлене вхідне значення для роботи.
// Параметри:
// pid - адреса екземпляра PIDControl.
// вхід - значення, з яким працюватиме контролер.
// Повертає:
// Нічого.
// --
статична вбудована порожнеча
PIDInputSet(PIDControl *pid, float input)
{
  pid->input = вхід;
}

// --
// Отримати вихід PID
// Опис:
// Як правило, ця функція викликається після PIDCompute, щоб
// отримати вихідні дані контролера.
// Параметри:
// pid - адреса екземпляра PIDControl.
// Повертає:
// Вихід певного ПІД-регулятора.
// --
статичний inline float
PIDOutputGet(PIDControl *pid)
{
  return pid->output;
}

// --
// Отримання константи пропорційного підсилення ПІД
// Опис:
// Повертає постійне значення пропорційного посилення
// контролер встановлено на.
// Параметри:
// pid - адреса екземпляра PIDControl.
// Повертає:
// Константа пропорційного посилення.
// --
статичний inline float
PIDKpGet(PIDControl *pid)
{
  повернення pid->dispKp;
}

// --
// Отримання константи інтегрального підсилення ПІД
// Опис:
// Повертає постійне значення посилення інтегралу
// контролер встановлено на.
// Параметри:
// pid - адреса екземпляра PIDControl.
// Повертає:
// Константа інтегрального посилення.
// --
статичний inline float
PIDKiGet(PIDControl *pid)
{
  повернення pid->dispKi;
}

// --
// Отримання константи похідної посилення ПІД
// Опис:
// Повертає постійне значення посилення похідної
// контролер встановлено на.
// Параметри:
// pid - адреса екземпляра PIDControl.
// Повертає:
// Константа підсилення похідної.
// --
статичний inline float
PIDKdGet(PIDControl *pid)
{
  повернення pid->dispKd;
}

// --
// Отримання режиму PID
// Опис:
// Повертає режим, на який встановлено конкретний контролер.
// Параметри:
// pid - адреса екземпляра PIDControl.
// Повертає:
// РУЧНИЙ або АВТОМАТИЧНИЙ залежно від того, що встановив користувач
// контролер до.
// --
статичний вбудований PIDMode
PIDModeGet(PIDControl *pid)
{
  повернути pid->mode;
}

// --
// Отримання напрямку PID
// Опис:
// Повертає напрямок, у якому встановлено певний контролер.
// Параметри:
// pid - адреса екземпляра PIDControl.
// Повертає:
// ПРЯМИЙ або ЗВЕРНУТИЙ залежно від того, що встановив користувач
// контролер до.
// --
статичний вбудований PIDDirection
PIDDirectionGet(PIDControl *pid)
{
  повернення pid->controllerDirection;
}

// --
// Кінець прив'язки C
// --
#ifdef __cplusplus
}
#endif

#endif // PID_CONTROLLER_H
